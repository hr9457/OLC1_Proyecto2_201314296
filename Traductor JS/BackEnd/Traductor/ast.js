/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ast = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[4,11],$V3=[1,30],$V4=[1,29],$V5=[1,34],$V6=[1,31],$V7=[1,32],$V8=[1,33],$V9=[1,35],$Va=[2,11,13,15,24,35,36,37,38],$Vb=[1,48],$Vc=[1,50],$Vd=[1,53],$Ve=[1,57],$Vf=[1,54],$Vg=[1,55],$Vh=[1,56],$Vi=[1,58],$Vj=[34,40],$Vk=[2,11,13,15,24,35,36,37,38,74,77,79,80,82,83,84,85],$Vl=[1,70],$Vm=[1,67],$Vn=[1,68],$Vo=[1,71],$Vp=[1,72],$Vq=[1,73],$Vr=[1,74],$Vs=[1,75],$Vt=[1,76],$Vu=[11,15],$Vv=[1,90],$Vw=[1,88],$Vx=[1,84],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,89],$VC=[1,91],$VD=[1,92],$VE=[1,93],$VF=[1,94],$VG=[27,34,40,51,52,56,57,58,59,60,61,62,63,64],$VH=[27,34,40,52,56,57,58,59,62],$VI=[27,34,40,51,52,56,57,58,59,61,62],$VJ=[27,34,40,51,52,56,57,58,59,61,62,63,64],$VK=[27,34,40,56,57,62],$VL=[1,132],$VM=[1,151],$VN=[1,160],$VO=[1,153],$VP=[1,154],$VQ=[1,155],$VR=[1,157],$VS=[1,158],$VT=[1,159],$VU=[1,156],$VV=[27,40],$VW=[1,179],$VX=[2,13,15,24,35,36,37,38,74,77,79,80,82,83,84,85],$VY=[1,181],$VZ=[1,221],$V_=[1,248],$V$=[13,15,74,77,79,80,82,83,84,85],$V01=[1,296],$V11=[2,13,15,24,35,36,37,38,74,76,77,79,80,82,83,84,85];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"EOF":4,"JAVA":5,"CLASE":6,"INTERFACE":7,"ERROR":8,"ESTRUCTURA-CLASE":9,"ESTRUCTURA-INTERFACE":10,"Tk_public":11,"TK_class":12,"Tk_identificador":13,"{":14,"}":15,"INSTRUCCIONES-CLASE":16,"Tk_interface":17,"INSTRUCCIONES-INTERFACE":18,"METODO-MAIN":19,"Tk_static":20,"Tk_void":21,"Tk_main":22,"(":23,"Tk_String":24,"[":25,"]":26,")":27,"INSTRUCCIONES-MAIN":28,"METODO":29,"TIPO-RETORNO":30,"PARAMETROS":31,"INSTRUCCIONES-METODO":32,"FUNCION":33,";":34,"Tk_int":35,"Tk_boolean":36,"Tk_double":37,"Tk_char":38,"TIPO-VARIABLE":39,",":40,"VARIABLE":41,"ASIGNACION-A":42,"LLAMADA-METODO":43,"FUNCION-IF":44,"FUNCION-FOR":45,"FUNCION-WHILE":46,"FUNCION-DOWHILE":47,"IMPRESION":48,"IMPRESION-SALTO":49,"RETORNO":50,"+":51,"=":52,"EXPRESION":53,"DECLARACION":54,"ASIGNACION":55,"&":56,"|":57,">":58,"<":59,"!":60,"-":61,"^":62,"*":63,"/":64,"VALOR":65,"Tk_digito":66,"Tk_decimal":67,"Tk_cadena":68,"Tk_cadenaChar":69,"Tk_true":70,"Tk_false":71,"IF":72,"ELSE":73,"Tk_if":74,"INSTRUCCIONES-CICLOS":75,"Tk_else":76,"Tk_for":77,"DEC":78,"Tk_while":79,"Tk_do":80,"PARAMETROSEN-LLAMADA":81,"Tk_break":82,"Tk_continue":83,"Tk_return":84,"Tk_System":85,".":86,"Tk_out":87,"Tk_print":88,"Tk_println":89,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",11:"Tk_public",12:"TK_class",13:"Tk_identificador",14:"{",15:"}",17:"Tk_interface",20:"Tk_static",21:"Tk_void",22:"Tk_main",23:"(",24:"Tk_String",25:"[",26:"]",27:")",34:";",35:"Tk_int",36:"Tk_boolean",37:"Tk_double",38:"Tk_char",40:",",51:"+",52:"=",56:"&",57:"|",58:">",59:"<",60:"!",61:"-",62:"^",63:"*",64:"/",66:"Tk_digito",67:"Tk_decimal",68:"Tk_cadena",69:"Tk_cadenaChar",70:"Tk_true",71:"Tk_false",74:"Tk_if",76:"Tk_else",77:"Tk_for",79:"Tk_while",80:"Tk_do",82:"Tk_break",83:"Tk_continue",84:"Tk_return",85:"Tk_System",86:".",87:"Tk_out",88:"Tk_print",89:"Tk_println"},
productions_: [0,[3,1],[3,2],[3,0],[5,1],[5,1],[5,1],[5,2],[5,2],[6,1],[7,1],[9,5],[9,6],[10,5],[10,6],[19,12],[19,13],[29,7],[29,8],[29,8],[29,9],[33,6],[33,7],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[31,2],[31,4],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[16,2],[16,2],[16,2],[16,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[18,6],[18,7],[18,7],[18,8],[18,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,4],[32,2],[32,2],[32,2],[32,2],[32,2],[32,2],[32,2],[32,2],[32,2],[32,2],[32,5],[42,4],[41,3],[41,2],[39,1],[39,1],[39,1],[39,1],[39,1],[54,1],[54,3],[55,3],[55,1],[53,4],[53,4],[53,4],[53,4],[53,4],[53,4],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,2],[53,2],[53,1],[53,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[44,2],[72,7],[72,6],[72,9],[72,8],[73,4],[73,3],[73,0],[45,11],[45,10],[78,4],[78,3],[78,1],[46,7],[46,6],[47,9],[47,8],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,4],[75,2],[75,2],[75,2],[75,2],[75,2],[75,2],[75,2],[75,2],[75,5],[43,4],[43,5],[81,1],[81,3],[50,2],[50,2],[50,2],[50,3],[48,8],[48,9],[49,8],[49,9],[8,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return 'Archivo Vacio';
break;
case 2:
console.log(JSON.stringify(listaReporteToken));
break;
case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74:
this.$=`\t${$$[$0]}`;
break;
case 174:
console.log('error Sintactico:  '+yytext+'  fila: '+ this._$.first_line );
break;
}
},
table: [{1:[2,3],2:$V0,3:1,4:[1,2],5:3,6:4,7:5,8:6,9:7,10:8,11:$V1},{1:[3]},{1:[2,1]},{4:[1,11],6:12,7:13,9:7,10:8,11:$V1},o($V2,[2,4]),o($V2,[2,5]),o($V2,[2,6]),o($V2,[2,9]),o($V2,[2,10]),o([4,11,34],[2,174]),{12:[1,14],17:[1,15]},{1:[2,2]},o($V2,[2,7]),o($V2,[2,8]),{13:[1,16]},{13:[1,17]},{14:[1,18]},{14:[1,19]},{2:$V0,8:28,11:$V3,13:$V4,15:[1,20],16:21,19:25,24:$V5,29:24,33:26,35:$V6,36:$V7,37:$V8,38:$V9,39:27,41:22,42:23},{2:$V0,8:39,11:[1,38],15:[1,36],18:37},o($V2,[2,11]),{2:$V0,8:28,11:$V3,13:$V4,15:[1,40],19:45,24:$V5,29:41,33:42,35:$V6,36:$V7,37:$V8,38:$V9,39:27,41:43,42:44},o($Va,[2,31]),o($Va,[2,32]),o($Va,[2,33]),o($Va,[2,34]),o($Va,[2,35]),{13:$Vb,54:46,55:47},{34:[1,49]},{52:$Vc},{20:[1,52],21:$Vd,24:$Ve,30:51,35:$Vf,36:$Vg,37:$Vh,38:$Vi},{13:[2,91]},{13:[2,92]},{13:[2,93]},{13:[2,94]},{13:[2,95]},o($V2,[2,13]),{11:[1,60],15:[1,59]},{21:$Vd,24:$Ve,30:61,35:$Vf,36:$Vg,37:$Vh,38:$Vi},{34:[1,62]},o($V2,[2,12]),o($Va,[2,36]),o($Va,[2,37]),o($Va,[2,38]),o($Va,[2,39]),o($Va,[2,40]),{34:[1,63],40:[1,64]},o($Vj,[2,96]),o($Vj,[2,99],{52:[1,65]}),o($Vk,[2,90]),{13:$Vl,53:66,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{13:[1,77]},{21:[1,78]},{13:[2,23]},{13:[2,24]},{13:[2,25]},{13:[2,26]},{13:[2,27]},{13:[2,28]},o($V2,[2,14]),{21:$Vd,24:$Ve,30:79,35:$Vf,36:$Vg,37:$Vh,38:$Vi},{13:[1,80]},o($Vu,[2,65]),o($Vk,[2,89]),{13:$Vb,55:81},{13:$Vl,53:82,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{34:[1,83],51:$Vv,52:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF},{13:$Vl,53:95,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{13:$Vl,53:96,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},o($VG,[2,117]),o($VG,[2,118]),o($VG,[2,119]),o($VG,[2,120]),o($VG,[2,121]),o($VG,[2,122]),o($VG,[2,123]),o($VG,[2,124]),{23:[1,97]},{22:[1,98]},{13:[1,99]},{23:[1,100]},o($Vj,[2,97]),o($Vj,[2,98],{51:$Vv,52:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF}),o($Vk,[2,88]),{56:[1,101]},{57:[1,102]},{13:$Vl,52:[1,103],53:104,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{13:$Vl,52:[1,105],53:106,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{52:[1,107]},{52:[1,108]},{13:$Vl,51:[1,109],53:110,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{13:$Vl,53:112,60:$Vm,61:[1,111],65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{13:$Vl,53:113,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{13:$Vl,53:114,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{13:$Vl,53:115,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},o($VG,[2,115]),o($VG,[2,116]),{24:$V5,27:[1,116],31:117,35:$V6,36:$V7,37:$V8,38:$V9,39:118},{23:[1,119]},{23:[1,120]},{24:$V5,27:[1,121],31:122,35:$V6,36:$V7,37:$V8,38:$V9,39:118},{13:$Vl,53:123,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{13:$Vl,53:124,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{13:$Vl,53:125,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},o($VH,[2,109],{51:$Vv,60:$VB,61:$VC,63:$VE,64:$VF}),{13:$Vl,53:126,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},o($VH,[2,110],{51:$Vv,60:$VB,61:$VC,63:$VE,64:$VF}),{13:$Vl,53:127,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{13:$Vl,53:128,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},o($VG,[2,106]),o($VI,[2,113],{60:$VB,63:$VE,64:$VF}),o($VJ,[2,107],{65:69,53:96,13:$Vl,60:$Vm,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt}),o($VI,[2,114],{60:$VB,63:$VE,64:$VF}),o($VK,[2,108],{51:$Vv,52:$Vw,58:$Vz,59:$VA,60:$VB,61:$VC,63:$VE,64:$VF}),o($VJ,[2,111],{60:$VB}),o($VJ,[2,112],{60:$VB}),{14:[1,129],34:[1,130]},{27:[1,131],40:$VL},{13:[1,133]},{24:[1,134]},{24:$V5,27:[1,135],31:136,35:$V6,36:$V7,37:$V8,38:$V9,39:118},{34:[1,137]},{27:[1,138],40:$VL},o($VK,[2,100],{51:$Vv,52:$Vw,58:$Vz,59:$VA,60:$VB,61:$VC,63:$VE,64:$VF}),o($VK,[2,101],{51:$Vv,52:$Vw,58:$Vz,59:$VA,60:$VB,61:$VC,63:$VE,64:$VF}),o($VH,[2,102],{51:$Vv,60:$VB,61:$VC,63:$VE,64:$VF}),o($VH,[2,103],{51:$Vv,60:$VB,61:$VC,63:$VE,64:$VF}),o($VH,[2,104],{51:$Vv,60:$VB,61:$VC,63:$VE,64:$VF}),o($VG,[2,105]),{2:$V0,8:28,13:$VM,15:[1,139],24:$V5,32:140,35:$V6,36:$V7,37:$V8,38:$V9,39:27,41:141,42:142,43:147,44:143,45:144,46:145,47:146,48:148,49:149,50:150,72:152,74:$VN,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},o($Va,[2,21]),{14:[1,161],34:[1,162]},{24:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:163},o($VV,[2,29]),{25:[1,164]},{34:[1,165]},{27:[1,166],40:$VL},o($Vu,[2,61]),{34:[1,167]},o($Va,[2,17]),{2:$V0,8:28,13:$VW,15:[1,168],24:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:27,41:169,42:170,43:175,44:171,45:172,46:173,47:174,48:176,49:177,50:178,72:152,74:$VN,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},o($VX,[2,66]),o($VX,[2,67]),o($VX,[2,68]),o($VX,[2,69]),o($VX,[2,70]),o($VX,[2,71]),o($VX,[2,72]),o($VX,[2,73]),o($VX,[2,74]),o($VX,[2,75]),{23:$VY,51:[1,180],52:$Vc},o($VX,[2,132],{73:182,76:[1,183]}),{23:[1,184]},{23:[1,185]},{14:[1,186]},{86:[1,187]},{34:[1,188]},{34:[1,189]},{13:$Vl,34:[1,190],53:191,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{23:[1,192]},{2:$V0,8:28,13:$VM,15:[1,193],24:$V5,32:194,35:$V6,36:$V7,37:$V8,38:$V9,39:27,41:141,42:142,43:147,44:143,45:144,46:145,47:146,48:148,49:149,50:150,72:152,74:$VN,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},o($Va,[2,22]),{13:[1,195]},{26:[1,196]},o($Vu,[2,63]),{34:[1,197]},o($Vu,[2,62]),o($Va,[2,19]),o($VX,[2,77]),o($VX,[2,78]),o($VX,[2,79]),o($VX,[2,80]),o($VX,[2,81]),o($VX,[2,82]),o($VX,[2,83]),o($VX,[2,84]),o($VX,[2,85]),o($VX,[2,86]),{23:$VY,51:[1,198],52:$Vc},{51:[1,199]},{13:$Vl,27:[1,200],53:202,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,81:201},o($VX,[2,125]),{14:[1,204],74:[1,203]},{13:[1,207],24:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:206,78:205},{13:$Vl,53:208,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{2:$V0,8:28,13:$VZ,15:[1,210],24:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:27,41:211,42:212,43:217,44:213,45:214,46:215,47:216,48:218,49:219,50:220,72:152,74:$VN,75:209,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{87:[1,222]},o($VX,[2,166]),o($VX,[2,167]),o($VX,[2,168]),{34:[1,223],51:$Vv,52:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF},{13:$Vl,53:224,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},o($Va,[2,18]),{2:$V0,8:28,13:$VW,15:[1,225],24:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:27,41:169,42:170,43:175,44:171,45:172,46:173,47:174,48:176,49:177,50:178,72:152,74:$VN,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},o($VV,[2,30]),{13:[1,226]},o($Vu,[2,64]),{51:[1,227]},{34:[1,228]},{34:[1,229]},{27:[1,230],40:[1,231]},o($VV,[2,164],{51:$Vv,52:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF}),{23:[1,232]},{2:$V0,8:28,13:$VZ,15:[1,234],24:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:27,41:211,42:212,43:217,44:213,45:214,46:215,47:216,48:218,49:219,50:220,72:152,74:$VN,75:233,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{34:[1,235]},{13:[1,236]},{34:[2,137],52:[1,237]},{27:[1,238],51:$Vv,52:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF},{13:$V_,15:[1,239],43:244,44:240,45:241,46:242,47:243,48:245,49:246,50:247,72:152,74:$VN,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{79:[1,249]},o($V$,[2,142]),o($V$,[2,143]),o($V$,[2,144]),o($V$,[2,145]),o($V$,[2,146]),o($V$,[2,147]),o($V$,[2,148]),o($V$,[2,149]),o($V$,[2,150]),o($V$,[2,151]),{23:$VY,51:[1,250],52:$Vc},{86:[1,251]},o($VX,[2,169]),{27:[1,252],51:$Vv,52:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF},o($Va,[2,20]),{27:[1,253]},{34:[1,254]},o($VX,[2,76]),o($VX,[2,162]),{34:[1,255]},{13:$Vl,53:256,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{13:$Vl,53:257,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{13:$V_,15:[1,258],43:244,44:240,45:241,46:242,47:243,48:245,49:246,50:247,72:152,74:$VN,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},o($VX,[2,131]),{13:$Vl,53:259,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{52:[1,260]},{65:261,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{14:[1,262]},{79:[1,263]},o($V$,[2,153]),o($V$,[2,154]),o($V$,[2,155]),o($V$,[2,156]),o($V$,[2,157]),o($V$,[2,158]),o($V$,[2,159]),o($V$,[2,160]),{23:$VY,51:[1,264]},{23:[1,265]},{51:[1,266]},{88:[1,267],89:[1,268]},{14:[1,269]},{14:[1,270]},o($VX,[2,87]),o($VX,[2,163]),o($VV,[2,165],{51:$Vv,52:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF}),{27:[1,271],51:$Vv,52:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF},o($VX,[2,130]),{34:[1,272],51:$Vv,52:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF},{65:273,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{34:[2,136]},{2:$V0,8:28,13:$VZ,15:[1,275],24:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:27,41:211,42:212,43:217,44:213,45:214,46:215,47:216,48:218,49:219,50:220,72:152,74:$VN,75:274,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{23:[1,276]},{51:[1,277]},{13:$Vl,53:278,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{34:[1,279]},{23:[1,280]},{23:[1,281]},{2:$V0,8:28,13:$VZ,15:[1,283],24:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:27,41:211,42:212,43:217,44:213,45:214,46:215,47:216,48:218,49:219,50:220,72:152,74:$VN,75:282,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{2:$V0,8:28,13:$V01,15:[1,284],24:$V5,28:285,35:$V6,36:$V7,37:$V8,38:$V9,39:27,41:286,42:287,43:288,44:289,45:290,46:291,47:292,48:293,49:294,50:295,72:152,74:$VN,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{14:[1,297]},{13:$Vl,53:298,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{34:[2,135]},{13:$V_,15:[1,299],43:244,44:240,45:241,46:242,47:243,48:245,49:246,50:247,72:152,74:$VN,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},o($VX,[2,139]),{13:$Vl,53:300,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{34:[1,301]},{27:[1,302],51:$Vv,52:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF},o($V$,[2,152]),{13:$Vl,27:[1,303],53:304,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{13:$Vl,27:[1,305],53:306,60:$Vm,61:$Vn,65:69,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{13:$V_,15:[1,307],43:244,44:240,45:241,46:242,47:243,48:245,49:246,50:247,72:152,74:$VN,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},o($V11,[2,127]),o($Va,[2,15]),{2:$V0,8:28,13:$V01,15:[1,308],24:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:27,41:309,42:310,43:311,44:312,45:313,46:314,47:315,48:316,49:317,50:318,72:152,74:$VN,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},o($VX,[2,41]),o($VX,[2,42]),o($VX,[2,43]),o($VX,[2,44]),o($VX,[2,45]),o($VX,[2,46]),o($VX,[2,47]),o($VX,[2,48]),o($VX,[2,49]),o($VX,[2,50]),{23:$VY,52:$Vc},{2:$V0,8:28,13:$VZ,15:[1,320],24:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:27,41:211,42:212,43:217,44:213,45:214,46:215,47:216,48:218,49:219,50:220,72:152,74:$VN,75:319,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{27:[1,321],51:$Vv,52:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF},o($VX,[2,138]),{27:[1,322],51:$Vv,52:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF},o($V$,[2,161]),{34:[1,323]},{34:[1,324]},{27:[1,325],51:$Vv,52:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF},{34:[1,326]},{27:[1,327],51:$Vv,52:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF},o($V11,[2,126]),o($Va,[2,16]),o($VX,[2,51]),o($VX,[2,52]),o($VX,[2,53]),o($VX,[2,54]),o($VX,[2,55]),o($VX,[2,56]),o($VX,[2,57]),o($VX,[2,58]),o($VX,[2,59]),o($VX,[2,60]),{13:$V_,15:[1,328],43:244,44:240,45:241,46:242,47:243,48:245,49:246,50:247,72:152,74:$VN,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},o($V11,[2,129]),{14:[1,329]},{34:[1,330]},o($VX,[2,141]),o($VX,[2,170]),{34:[1,331]},o($VX,[2,172]),{34:[1,332]},o($V11,[2,128]),{2:$V0,8:28,13:$VZ,15:[1,334],24:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:27,41:211,42:212,43:217,44:213,45:214,46:215,47:216,48:218,49:219,50:220,72:152,74:$VN,75:333,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},o($VX,[2,140]),o($VX,[2,171]),o($VX,[2,173]),{13:$V_,15:[1,335],43:244,44:240,45:241,46:242,47:243,48:245,49:246,50:247,72:152,74:$VN,77:$VO,79:$VP,80:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},o($VX,[2,134]),o($VX,[2,133])],
defaultActions: {2:[2,1],11:[2,2],31:[2,91],32:[2,92],33:[2,93],34:[2,94],35:[2,95],53:[2,23],54:[2,24],55:[2,25],56:[2,26],57:[2,27],58:[2,28],261:[2,136],273:[2,135]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    console.log("*************************UTILIDADES*******************************")
    var ast = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:return 67;
break;
case 2:return 66;
break;
case 3:return 68;
break;
case 4:return 69;
break;
case 5:
break;
case 6:
break;
case 7:return 11;
break;
case 8:return 12;
break;
case 9:return 22
break;
case 10:return 17;
break;
case 11:return 21;
break;
case 12:return 20;
break;
case 13:return 35;
break;
case 14:return 37;
break;
case 15:return 38;
break;
case 16:return 36;
break;
case 17:return 70;
break;
case 18:return 71;
break;
case 19:return 24;
break;
case 20:return 77;
break;
case 21:return 79;
break;
case 22:return 80;
break;
case 23:return 74;
break;
case 24:return 76;
break;
case 25:return 82;
break;
case 26:return 83;
break;
case 27:return 84;
break;
case 28:return 85;
break;
case 29:return 87;
break;
case 30:return 88;
break;
case 31:return 89;
break;
case 32:return 14;
break;
case 33:return 15;
break;
case 34:return 23;
break;
case 35:return 27;
break;
case 36:return 25;
break;
case 37:return 26;
break;
case 38:return 40;
break;
case 39:return 86;
break;
case 40:return 34;
break;
case 41:return 59;
break;
case 42:return 58;
break;
case 43:return 56;
break;
case 44:return 57;
break;
case 45:return 60;
break;
case 46:return 62;
break;
case 47:return 52;
break;
case 48:return 51;
break;
case 49:return 61;
break;
case 50:return 63;
break;
case 51:return 64;
break;
case 52:return 13;
break;
case 53:addErrorLexico("Lexico",yy_.yylloc.first_line,yy_.yylloc.first_column,"El caracter "+yy_.yytext+" no pertenece al lenguaje");
break;
case 54:return 4;
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(.[0-9])+\b)/,/^(?:[0-9]+\b)/,/^(?:".*")/,/^(?:'.*')/,/^(?:\/\/.*)/,/^(?:\/\*(\*(?!\/)|[^*])*\*\/)/,/^(?:public\b)/,/^(?:class\b)/,/^(?:main\b)/,/^(?:interface\b)/,/^(?:void\b)/,/^(?:static\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:String\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:<)/,/^(?:>)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:\^)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ast;
exports.Parser = ast.Parser;
exports.parse = function () { return ast.parse.apply(ast, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}