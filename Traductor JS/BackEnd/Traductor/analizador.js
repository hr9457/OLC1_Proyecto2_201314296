/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[4,11],$V3=[1,29],$V4=[1,34],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,35],$V9=[2,11,13,15,24,35,36,37,38],$Va=[1,48],$Vb=[1,50],$Vc=[1,53],$Vd=[1,57],$Ve=[1,54],$Vf=[1,55],$Vg=[1,56],$Vh=[1,58],$Vi=[34,40],$Vj=[2,11,13,15,24,34,35,36,37,38,74,77,79,80,84,85,86,87],$Vk=[1,69],$Vl=[1,67],$Vm=[1,70],$Vn=[1,71],$Vo=[1,72],$Vp=[1,73],$Vq=[1,74],$Vr=[1,75],$Vs=[11,15],$Vt=[1,87],$Vu=[1,83],$Vv=[1,84],$Vw=[1,85],$Vx=[1,86],$Vy=[1,88],$Vz=[1,89],$VA=[1,90],$VB=[1,91],$VC=[1,92],$VD=[1,93],$VE=[27,34,40,51,55,56,57,58,59,60,61,62,63,64],$VF=[27,34,40,51,55,56,57,58,62],$VG=[27,34,40,51,55,56,57,58,60,61,62],$VH=[27,34,40,55,56,62],$VI=[27,34,40,51,55,56,57,58,60,61,62,63,64],$VJ=[1,131],$VK=[27,40],$VL=[1,158],$VM=[1,167],$VN=[1,160],$VO=[1,161],$VP=[1,162],$VQ=[1,164],$VR=[1,165],$VS=[1,166],$VT=[1,163],$VU=[2,13,15,24,35,36,37,38,74,77,79,80,84,85,86,87],$VV=[1,182],$VW=[1,199],$VX=[1,200],$VY=[1,201],$VZ=[1,202],$V_=[1,203],$V$=[1,204],$V01=[1,205],$V11=[1,222],$V21=[13,27,66,67,68,69,70,71],$V31=[13,15,74,77,79,80,84,85,86,87],$V41=[2,13,15,24,35,36,37,38,74,76,77,79,80,84,85,86,87];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"EOF":4,"JAVA":5,"CLASE":6,"INTERFACE":7,"ERROR":8,"ESTRUCTURA-CLASE":9,"ESTRUCTURA-INTERFACE":10,"Tk_public":11,"TK_class":12,"Tk_identificador":13,"{":14,"}":15,"INSTRUCCIONES-CLASE":16,"Tk_interface":17,"INSTRUCCIONES-INTERFACE":18,"METODO-MAIN":19,"Tk_static":20,"Tk_void":21,"Tk_main":22,"(":23,"Tk_String":24,"[":25,"]":26,")":27,"INSTRUCCIONES-MAIN":28,"METODO":29,"TIPO-RETORNO":30,"PARAMETROS":31,"INSTRUCCIONES-METODO":32,"FUNCION":33,";":34,"Tk_int":35,"Tk_boolean":36,"Tk_double":37,"Tk_char":38,"TIPO-VARIABLE":39,",":40,"VARIABLE":41,"ASIGNACION-A":42,"LLAMADA-METODO":43,"FUNCION-IF":44,"FUNCION-FOR":45,"FUNCION-WHILE":46,"FUNCION-DOWHILE":47,"IMPRESION":48,"IMPRESION-SALTO":49,"RETORNO":50,"=":51,"EXPRESION":52,"DECLARACION":53,"ASIGNACION":54,"&":55,"|":56,">":57,"<":58,"!":59,"+":60,"-":61,"^":62,"*":63,"/":64,"VALOR":65,"Tk_digito":66,"Tk_decimal":67,"Tk_cadena":68,"Tk_cadenaChar":69,"Tk_true":70,"Tk_false":71,"IF":72,"ELSE":73,"Tk_if":74,"INSTRUCCIONES-CICLOS":75,"Tk_else":76,"Tk_for":77,"DEC":78,"Tk_while":79,"Tk_do":80,"PARAMETROSEN-LLAMADA":81,"VARIABLE-DEFINIDA":82,"VALORDE-ENVIO":83,"Tk_break":84,"Tk_continue":85,"Tk_return":86,"Tk_System":87,".":88,"Tk_out":89,"Tk_print":90,"Tk_println":91,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",11:"Tk_public",12:"TK_class",13:"Tk_identificador",14:"{",15:"}",17:"Tk_interface",20:"Tk_static",21:"Tk_void",22:"Tk_main",23:"(",24:"Tk_String",25:"[",26:"]",27:")",34:";",35:"Tk_int",36:"Tk_boolean",37:"Tk_double",38:"Tk_char",40:",",51:"=",55:"&",56:"|",57:">",58:"<",59:"!",60:"+",61:"-",62:"^",63:"*",64:"/",66:"Tk_digito",67:"Tk_decimal",68:"Tk_cadena",69:"Tk_cadenaChar",70:"Tk_true",71:"Tk_false",74:"Tk_if",76:"Tk_else",77:"Tk_for",79:"Tk_while",80:"Tk_do",84:"Tk_break",85:"Tk_continue",86:"Tk_return",87:"Tk_System",88:".",89:"Tk_out",90:"Tk_print",91:"Tk_println"},
productions_: [0,[3,1],[3,2],[3,0],[5,1],[5,1],[5,2],[5,2],[5,1],[6,1],[7,1],[9,5],[9,6],[10,5],[10,6],[19,12],[19,13],[29,7],[29,8],[29,9],[33,6],[33,7],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[31,2],[31,4],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[16,2],[16,2],[16,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[18,6],[18,7],[18,7],[18,8],[18,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,2],[32,2],[32,2],[32,2],[32,2],[32,2],[32,2],[32,2],[32,2],[32,2],[42,4],[41,3],[41,2],[39,1],[39,1],[39,1],[39,1],[39,1],[53,1],[53,3],[54,3],[54,1],[52,4],[52,4],[52,4],[52,4],[52,4],[52,4],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,2],[52,1],[52,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[44,2],[72,7],[72,6],[72,9],[72,8],[73,4],[73,3],[73,0],[45,11],[45,10],[78,1],[78,1],[46,7],[46,6],[47,9],[47,8],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,2],[75,2],[75,2],[75,2],[75,2],[75,2],[75,2],[75,2],[43,4],[43,5],[81,1],[81,1],[81,2],[81,2],[82,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[50,2],[50,2],[50,2],[50,3],[48,8],[48,9],[49,8],[49,9],[8,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return 'Archivo Vacio';
break;
case 12:
 this.$='${$$[$0-5]}'; console.log(this.$);
break;
case 85:
 this.$='${$$[$0-2]} ${$$[$0-1]}'; 
break;
case 87: case 88: case 89: case 90: case 91:
this.$="var"
break;
case 92: case 95: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120:
this.$='${$$[$0]}';
break;
case 94:
this.$='${$$[$0-2]} ${$$[$0-1]} ${$$[$0]}';
break;
case 174:
console.log('error:  '+yytext+'  fila: '+ this._$.first_line );
break;
}
},
table: [{1:[2,3],2:$V0,3:1,4:[1,2],5:3,6:4,7:5,8:6,9:7,10:8,11:$V1},{1:[3]},{1:[2,1]},{4:[1,11],6:12,7:13,9:7,10:8,11:$V1},o($V2,[2,4]),o($V2,[2,5]),o($V2,[2,8]),o($V2,[2,9]),o($V2,[2,10]),o([4,11,34],[2,174]),{12:[1,14],17:[1,15]},{1:[2,2]},o($V2,[2,6]),o($V2,[2,7]),{13:[1,16]},{13:[1,17]},{14:[1,18]},{14:[1,19]},{2:$V0,8:28,11:[1,30],13:$V3,15:[1,20],16:21,19:25,24:$V4,29:24,33:26,35:$V5,36:$V6,37:$V7,38:$V8,39:27,41:22,42:23},{2:$V0,8:39,11:[1,38],15:[1,36],18:37},o($V2,[2,11]),{2:$V0,8:28,11:[1,45],13:$V3,15:[1,40],24:$V4,29:41,33:42,35:$V5,36:$V6,37:$V7,38:$V8,39:27,41:43,42:44},o($V9,[2,30]),o($V9,[2,31]),o($V9,[2,32]),o($V9,[2,33]),o($V9,[2,34]),{13:$Va,53:46,54:47},{34:[1,49]},{51:$Vb},{20:[1,52],21:$Vc,24:$Vd,30:51,35:$Ve,36:$Vf,37:$Vg,38:$Vh},{13:[2,87]},{13:[2,88]},{13:[2,89]},{13:[2,90]},{13:[2,91]},o($V2,[2,13]),{11:[1,60],15:[1,59]},{21:$Vc,24:$Vd,30:61,35:$Ve,36:$Vf,37:$Vg,38:$Vh},{34:[1,62]},o($V2,[2,12]),o($V9,[2,35]),o($V9,[2,36]),o($V9,[2,37]),o($V9,[2,38]),{21:$Vc,24:$Vd,30:51,35:$Ve,36:$Vf,37:$Vg,38:$Vh},{34:[1,63],40:[1,64]},o($Vi,[2,92]),o($Vi,[2,95],{51:[1,65]}),o($Vj,[2,86]),{13:$Vk,52:66,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:[1,76]},{21:[1,77]},{13:[2,22]},{13:[2,23]},{13:[2,24]},{13:[2,25]},{13:[2,26]},{13:[2,27]},o($V2,[2,14]),{21:$Vc,24:$Vd,30:78,35:$Ve,36:$Vf,37:$Vg,38:$Vh},{13:[1,79]},o($Vs,[2,63]),o($Vj,[2,85]),{13:$Va,54:80},{13:$Vk,52:81,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{34:[1,82],51:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{13:$Vk,52:94,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},o($VE,[2,113]),o($VE,[2,114]),o($VE,[2,115]),o($VE,[2,116]),o($VE,[2,117]),o($VE,[2,118]),o($VE,[2,119]),o($VE,[2,120]),{23:[1,95]},{22:[1,96]},{13:[1,97]},{23:[1,98]},o($Vi,[2,93]),o($Vi,[2,94],{51:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD}),o($Vj,[2,84]),{55:[1,99]},{56:[1,100]},{13:$Vk,51:[1,101],52:102,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:$Vk,51:[1,103],52:104,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{51:[1,105]},{13:$Vk,51:[1,106],52:107,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:$Vk,52:109,60:[1,108],61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:$Vk,52:111,61:[1,110],65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:$Vk,52:112,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:$Vk,52:113,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:$Vk,52:114,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},o($VE,[2,112]),{24:$V4,27:[1,115],31:116,35:$V5,36:$V6,37:$V7,38:$V8,39:117},{23:[1,118]},{23:[1,119]},{24:$V4,27:[1,120],31:121,35:$V5,36:$V6,37:$V7,38:$V8,39:117},{13:$Vk,52:122,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:$Vk,52:123,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:$Vk,52:124,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},o($VF,[2,106],{59:$Vy,60:$Vz,61:$VA,63:$VC,64:$VD}),{13:$Vk,52:125,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},o($VF,[2,107],{59:$Vy,60:$Vz,61:$VA,63:$VC,64:$VD}),{13:$Vk,52:126,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:$Vk,52:127,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},o($VE,[2,104]),o($VE,[2,102]),o($VG,[2,110],{59:$Vy,63:$VC,64:$VD}),o($VE,[2,103],{65:68,52:94,13:$Vk,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr}),o($VG,[2,111],{59:$Vy,63:$VC,64:$VD}),o($VH,[2,105],{51:$Vt,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,63:$VC,64:$VD}),o($VI,[2,108],{59:$Vy}),o($VI,[2,109],{59:$Vy}),{14:[1,128],34:[1,129]},{27:[1,130],40:$VJ},{13:[1,132]},{24:[1,133]},{24:$V4,27:[1,134],31:135,35:$V5,36:$V6,37:$V7,38:$V8,39:117},{34:[1,136]},{27:[1,137],40:$VJ},o($VH,[2,96],{51:$Vt,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,63:$VC,64:$VD}),o($VH,[2,97],{51:$Vt,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,63:$VC,64:$VD}),o($VF,[2,98],{59:$Vy,60:$Vz,61:$VA,63:$VC,64:$VD}),o($VF,[2,99],{59:$Vy,60:$Vz,61:$VA,63:$VC,64:$VD}),o($VF,[2,100],{59:$Vy,60:$Vz,61:$VA,63:$VC,64:$VD}),o($VE,[2,101]),{15:[1,138]},o($V9,[2,20]),{14:[1,139],34:[1,140]},{24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:141},o($VK,[2,28]),{25:[1,142]},{34:[1,143]},{27:[1,144],40:$VJ},o($Vs,[2,59]),{34:[1,145]},o($V9,[2,17]),{2:$V0,8:28,13:$VL,15:[1,146],24:$V4,32:147,35:$V5,36:$V6,37:$V7,38:$V8,39:27,41:148,42:149,43:154,44:150,45:151,46:152,47:153,48:155,49:156,50:157,72:159,74:$VM,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},o($V9,[2,21]),{13:[1,168]},{26:[1,169]},o($Vs,[2,61]),{34:[1,170]},o($Vs,[2,60]),o($V9,[2,18]),{2:$V0,8:28,13:$VL,15:[1,171],24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:27,41:172,42:173,43:178,44:174,45:175,46:176,47:177,48:179,49:180,50:181,72:159,74:$VM,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},o($VU,[2,64]),o($VU,[2,65]),o($VU,[2,66]),o($VU,[2,67]),o($VU,[2,68]),o($VU,[2,69]),o($VU,[2,70]),o($VU,[2,71]),o($VU,[2,72]),o($VU,[2,73]),{23:$VV,51:$Vb},o($VU,[2,128],{73:183,76:[1,184]}),{23:[1,185]},{23:[1,186]},{14:[1,187]},{88:[1,188]},{34:[1,189]},{34:[1,190]},{13:$Vk,34:[1,191],52:192,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{23:[1,193]},o($VK,[2,29]),{13:[1,194]},o($Vs,[2,62]),o($V9,[2,19]),o($VU,[2,74]),o($VU,[2,75]),o($VU,[2,76]),o($VU,[2,77]),o($VU,[2,78]),o($VU,[2,79]),o($VU,[2,80]),o($VU,[2,81]),o($VU,[2,82]),o($VU,[2,83]),{13:$VW,27:[1,195],66:$VX,67:$VY,68:$VZ,69:$V_,70:$V$,71:$V01,81:196,82:197,83:198},o($VU,[2,121]),{14:[1,207],74:[1,206]},{2:$V0,8:28,13:$V3,24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:27,41:209,42:210,78:208},{13:$Vk,52:211,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:$V11,15:[1,213],43:218,44:214,45:215,46:216,47:217,48:219,49:220,50:221,72:159,74:$VM,75:212,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},{89:[1,223]},o($VU,[2,166]),o($VU,[2,167]),o($VU,[2,168]),{34:[1,224],51:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{13:$Vk,52:225,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{27:[1,226]},{34:[1,227]},{13:$VW,27:[1,228],66:$VX,67:$VY,68:$VZ,69:$V_,70:$V$,71:$V01,82:229,83:230},o($V21,[2,155]),o($V21,[2,156]),o($V21,[2,159]),o($V21,[2,160]),o($V21,[2,161]),o($V21,[2,162]),o($V21,[2,163]),o($V21,[2,164]),o($V21,[2,165]),{23:[1,231]},{13:$V11,15:[1,233],43:218,44:214,45:215,46:216,47:217,48:219,49:220,50:221,72:159,74:$VM,75:232,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},{34:[1,234]},{34:[2,131]},{34:[2,132]},{27:[1,235],51:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{13:$V11,15:[1,236],43:241,44:237,45:238,46:239,47:240,48:242,49:243,50:244,72:159,74:$VM,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},{79:[1,245]},o($V31,[2,137]),o($V31,[2,138]),o($V31,[2,139]),o($V31,[2,140]),o($V31,[2,141]),o($V31,[2,142]),o($V31,[2,143]),o($V31,[2,144]),{23:$VV},{88:[1,246]},o($VU,[2,169]),{27:[1,247],51:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{14:[1,248]},o($VU,[2,153]),{34:[1,249]},o($V21,[2,157]),o($V21,[2,158]),{13:$Vk,52:250,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:$V11,15:[1,251],43:241,44:237,45:238,46:239,47:240,48:242,49:243,50:244,72:159,74:$VM,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},o($VU,[2,127]),{13:$Vk,52:252,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{14:[1,253]},{79:[1,254]},o($V31,[2,145]),o($V31,[2,146]),o($V31,[2,147]),o($V31,[2,148]),o($V31,[2,149]),o($V31,[2,150]),o($V31,[2,151]),o($V31,[2,152]),{23:[1,255]},{90:[1,256],91:[1,257]},{14:[1,258]},{2:$V0,8:28,13:$VL,15:[1,259],24:$V4,28:260,35:$V5,36:$V6,37:$V7,38:$V8,39:27,41:261,42:262,43:263,44:264,45:265,46:266,47:267,48:268,49:269,50:270,72:159,74:$VM,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},o($VU,[2,154]),{27:[1,271],51:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},o($VU,[2,126]),{34:[1,272],51:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{13:$V11,15:[1,274],43:218,44:214,45:215,46:216,47:217,48:219,49:220,50:221,72:159,74:$VM,75:273,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},{23:[1,275]},{13:$Vk,52:276,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{23:[1,277]},{23:[1,278]},{13:$V11,15:[1,280],43:218,44:214,45:215,46:216,47:217,48:219,49:220,50:221,72:159,74:$VM,75:279,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},o($V9,[2,15]),{2:$V0,8:28,13:$VL,15:[1,281],24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:27,41:282,42:283,43:284,44:285,45:286,46:287,47:288,48:289,49:290,50:291,72:159,74:$VM,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},o($VU,[2,39]),o($VU,[2,40]),o($VU,[2,41]),o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),o($VU,[2,45]),o($VU,[2,46]),o($VU,[2,47]),o($VU,[2,48]),{14:[1,292]},{13:$Vk,52:293,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:$V11,15:[1,294],43:241,44:237,45:238,46:239,47:240,48:242,49:243,50:244,72:159,74:$VM,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},o($VU,[2,134]),{13:$Vk,52:295,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{27:[1,296],51:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{13:$Vk,27:[1,297],52:298,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:$Vk,27:[1,299],52:300,61:$Vl,65:68,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr},{13:$V11,15:[1,301],43:241,44:237,45:238,46:239,47:240,48:242,49:243,50:244,72:159,74:$VM,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},o($V41,[2,123]),o($V9,[2,16]),o($VU,[2,49]),o($VU,[2,50]),o($VU,[2,51]),o($VU,[2,52]),o($VU,[2,53]),o($VU,[2,54]),o($VU,[2,55]),o($VU,[2,56]),o($VU,[2,57]),o($VU,[2,58]),{13:$V11,15:[1,303],43:218,44:214,45:215,46:216,47:217,48:219,49:220,50:221,72:159,74:$VM,75:302,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},{27:[1,304],51:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},o($VU,[2,133]),{27:[1,305],51:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{34:[1,306]},{34:[1,307]},{27:[1,308],51:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{34:[1,309]},{27:[1,310],51:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},o($V41,[2,122]),{13:$V11,15:[1,311],43:241,44:237,45:238,46:239,47:240,48:242,49:243,50:244,72:159,74:$VM,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},o($V41,[2,125]),{14:[1,312]},{34:[1,313]},o($VU,[2,136]),o($VU,[2,170]),{34:[1,314]},o($VU,[2,172]),{34:[1,315]},o($V41,[2,124]),{13:$V11,15:[1,317],43:218,44:214,45:215,46:216,47:217,48:219,49:220,50:221,72:159,74:$VM,75:316,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},o($VU,[2,135]),o($VU,[2,171]),o($VU,[2,173]),{13:$V11,15:[1,318],43:241,44:237,45:238,46:239,47:240,48:242,49:243,50:244,72:159,74:$VM,77:$VN,79:$VO,80:$VP,84:$VQ,85:$VR,86:$VS,87:$VT},o($VU,[2,130]),o($VU,[2,129])],
defaultActions: {2:[2,1],11:[2,2],31:[2,87],32:[2,88],33:[2,89],34:[2,90],35:[2,91],53:[2,22],54:[2,23],55:[2,24],56:[2,25],57:[2,26],58:[2,27],209:[2,131],210:[2,132]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    console.log("*************************UTILIDADES*******************************")
    var listaReporteToken = []
    var listaErroresLexicos = []
    var listaErroresSintacticos = []
    var listaTraducccion = []
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:return 67;
break;
case 2:return 66;
break;
case 3:return 68;
break;
case 4:return 69;
break;
case 5:
break;
case 6:
break;
case 7:return 11;
break;
case 8:return 12;
break;
case 9:return 22
break;
case 10:return 17;
break;
case 11:return 21;
break;
case 12:return 20;
break;
case 13:return 35;
break;
case 14:return 37;
break;
case 15:return 38;
break;
case 16:return 36;
break;
case 17:return 70;
break;
case 18:return 71;
break;
case 19:return 24;
break;
case 20:return 77;
break;
case 21:return 79;
break;
case 22:return 80;
break;
case 23:return 74;
break;
case 24:return 76;
break;
case 25:return 84;
break;
case 26:return 85;
break;
case 27:return 86;
break;
case 28:return 87;
break;
case 29:return 89;
break;
case 30:return 90;
break;
case 31:return 91;
break;
case 32:return 14;
break;
case 33:return 15;
break;
case 34:return 23;
break;
case 35:return 27;
break;
case 36:return 25;
break;
case 37:return 26;
break;
case 38:return 40;
break;
case 39:return 88;
break;
case 40:return 34;
break;
case 41:return 58;
break;
case 42:return 57;
break;
case 43:return 55;
break;
case 44:return 56;
break;
case 45:return 59;
break;
case 46:return 62;
break;
case 47:return 51;
break;
case 48:return 60;
break;
case 49:return 61;
break;
case 50:return 63;
break;
case 51:return 64;
break;
case 52:return 13;
break;
case 53:console.log('ERROR LEXICO:  '+yy_.yytext);
listaErroresLexicos.push(["Tipo: "+yy_.yytext,"Fila: "+yy_.yylloc.first_line,
"Columna: "+yy_.yylloc.first_column,"Descripcion: El caracter "+yy_.yytext+" no pertenece al lenguaje"]);

break;
case 54:return 4;
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:".*")/,/^(?:'.*')/,/^(?:\/\/.*)/,/^(?:\/\*(\*(?!\/)|[^*])*\*\/)/,/^(?:public\b)/,/^(?:class\b)/,/^(?:main\b)/,/^(?:interface\b)/,/^(?:void\b)/,/^(?:static\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:String\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:<)/,/^(?:>)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:\^)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}