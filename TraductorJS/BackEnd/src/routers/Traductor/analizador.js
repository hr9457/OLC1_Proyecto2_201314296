/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,8],$V2=[2,4,10],$V3=[1,28],$V4=[1,30],$V5=[1,29],$V6=[1,34],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,35],$Vb=[2,10,12,14,23,34,35,36,37],$Vc=[1,48],$Vd=[1,50],$Ve=[1,53],$Vf=[1,57],$Vg=[1,54],$Vh=[1,55],$Vi=[1,56],$Vj=[1,58],$Vk=[33,39],$Vl=[2,10,12,14,23,34,35,36,37,73,76,78,79,81,82,83,84],$Vm=[1,76],$Vn=[1,67],$Vo=[1,68],$Vp=[1,70],$Vq=[1,71],$Vr=[1,72],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[10,14],$Vw=[1,90],$Vx=[1,88],$Vy=[1,84],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,89],$VD=[1,91],$VE=[1,92],$VF=[1,93],$VG=[1,94],$VH=[26,33,39,50,51,55,56,57,58,59,60,61,62,63],$VI=[26,33,39,51,55,56,57,58,61],$VJ=[26,33,39,50,51,55,56,57,58,60,61],$VK=[26,33,39,50,51,55,56,57,58,60,61,62,63],$VL=[26,33,39,55,56,61],$VM=[1,132],$VN=[1,151],$VO=[1,160],$VP=[1,153],$VQ=[1,154],$VR=[1,155],$VS=[1,157],$VT=[1,158],$VU=[1,159],$VV=[1,156],$VW=[26,39],$VX=[1,179],$VY=[2,12,14,23,34,35,36,37,73,76,78,79,81,82,83,84],$VZ=[1,181],$V_=[1,221],$V$=[1,248],$V01=[12,14,73,76,78,79,81,82,83,84],$V11=[1,296],$V21=[2,12,14,23,34,35,36,37,73,75,76,78,79,81,82,83,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"EOF":4,"JAVA":5,"CLASE":6,"INTERFACE":7,"ESTRUCTURA-CLASE":8,"ESTRUCTURA-INTERFACE":9,"Tk_public":10,"TK_class":11,"Tk_identificador":12,"{":13,"}":14,"INSTRUCCIONES-CLASE":15,"Tk_interface":16,"INSTRUCCIONES-INTERFACE":17,"METODO-MAIN":18,"Tk_static":19,"Tk_void":20,"Tk_main":21,"(":22,"Tk_String":23,"[":24,"]":25,")":26,"INSTRUCCIONES-MAIN":27,"METODO":28,"TIPO-RETORNO":29,"PARAMETROS":30,"INSTRUCCIONES-METODO":31,"FUNCION":32,";":33,"Tk_int":34,"Tk_boolean":35,"Tk_double":36,"Tk_char":37,"TIPO-VARIABLE":38,",":39,"VARIABLE":40,"ASIGNACION-A":41,"LLAMADA-METODO":42,"FUNCION-IF":43,"FUNCION-FOR":44,"FUNCION-WHILE":45,"FUNCION-DOWHILE":46,"IMPRESION":47,"IMPRESION-SALTO":48,"RETORNO":49,"+":50,"=":51,"EXPRESION":52,"DECLARACION":53,"ASIGNACION":54,"&":55,"|":56,">":57,"<":58,"!":59,"-":60,"^":61,"*":62,"/":63,"VALOR":64,"Tk_digito":65,"Tk_decimal":66,"Tk_cadena":67,"Tk_cadenaChar":68,"Tk_true":69,"Tk_false":70,"IF":71,"ELSE":72,"Tk_if":73,"INSTRUCCIONES-CICLOS":74,"Tk_else":75,"Tk_for":76,"DEC":77,"Tk_while":78,"Tk_do":79,"PARAMETROSEN-LLAMADA":80,"Tk_break":81,"Tk_continue":82,"Tk_return":83,"Tk_System":84,".":85,"Tk_out":86,"Tk_print":87,"Tk_println":88,"ERROR":89,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",10:"Tk_public",11:"TK_class",12:"Tk_identificador",13:"{",14:"}",16:"Tk_interface",19:"Tk_static",20:"Tk_void",21:"Tk_main",22:"(",23:"Tk_String",24:"[",25:"]",26:")",33:";",34:"Tk_int",35:"Tk_boolean",36:"Tk_double",37:"Tk_char",39:",",50:"+",51:"=",55:"&",56:"|",57:">",58:"<",59:"!",60:"-",61:"^",62:"*",63:"/",65:"Tk_digito",66:"Tk_decimal",67:"Tk_cadena",68:"Tk_cadenaChar",69:"Tk_true",70:"Tk_false",73:"Tk_if",75:"Tk_else",76:"Tk_for",78:"Tk_while",79:"Tk_do",81:"Tk_break",82:"Tk_continue",83:"Tk_return",84:"Tk_System",85:".",86:"Tk_out",87:"Tk_print",88:"Tk_println"},
productions_: [0,[3,1],[3,2],[5,1],[5,1],[5,2],[5,2],[6,1],[7,1],[8,5],[8,6],[8,2],[9,5],[9,6],[18,12],[18,13],[28,7],[28,8],[28,8],[28,9],[32,6],[32,7],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[30,2],[30,4],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[15,2],[15,2],[15,2],[15,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[17,6],[17,7],[17,7],[17,8],[17,2],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,4],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,5],[41,4],[40,3],[40,2],[38,1],[38,1],[38,1],[38,1],[38,1],[53,1],[53,3],[54,3],[54,1],[52,4],[52,4],[52,4],[52,4],[52,4],[52,4],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,2],[52,2],[52,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[43,1],[43,2],[71,7],[71,6],[71,9],[71,8],[72,4],[72,3],[44,11],[44,10],[77,4],[77,3],[77,1],[45,7],[45,6],[46,9],[46,8],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,4],[74,2],[74,2],[74,2],[74,2],[74,2],[74,2],[74,2],[74,2],[74,5],[42,4],[42,5],[80,1],[80,3],[49,2],[49,2],[49,2],[49,3],[47,8],[47,9],[48,8],[48,9],[89,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return 'Archivo Vacio';
break;
case 2:
return [listaReporteToken,$$[$0-1]];
break;
case 3: case 7: case 28: case 30: case 31: case 32: case 33: case 34: case 40: case 41: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 98: case 124: case 136: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 150: case 163:
 this.$=`${$$[$0]}`; 
break;
case 4: case 89:
 this.$=``; 
break;
case 5: case 35: case 36: case 37: case 38: case 39: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 125: case 152: case 153: case 154: case 155: case 156: case 157: case 158: case 159:
 this.$=`${$$[$0-1]}\n${$$[$0]}`; 
break;
case 6:
 this.$=`${$$[$0-1]}`; 
break;
case 9:
 this.$ = `${$$[$0-4]} ${$$[$0-3]} ${$$[$0-2]} ${$$[$0-1]} \n${$$[$0]}`; 
break;
case 10:
 this.$ = `${$$[$0-5]} ${$$[$0-4]} ${$$[$0-3]} ${$$[$0-2]} \n${$$[$0-1]} \n${$$[$0]}`; 
break;
case 14:
 this.$=`function main ${$$[$0-7]} ${$$[$0-3]} ${$$[$0-2]} ${$$[$0-1]} \n${$$[$0]}`; 
break;
case 15:
 this.$=`function main ${$$[$0-8]} ${$$[$0-4]} ${$$[$0-3]} ${$$[$0-2]} \n${$$[$0-1]} ${$$[$0]}`; 
break;
case 16:
 this.$=`function ${$$[$0-4]} ${$$[$0-3]} ${$$[$0-2]} ${$$[$0-1]} ${$$[$0]}`; 
break;
case 17:
 this.$=`function ${$$[$0-5]} ${$$[$0-4]} ${$$[$0-3]} ${$$[$0-2]} ${$$[$0-1]} \n${$$[$0]}`; 
break;
case 18:
 this.$=`function ${$$[$0-5]} ${$$[$0-4]} ${$$[$0-3]} ${$$[$0-2]} \n${$$[$0-1]} \n${$$[$0]}`; 
break;
case 19:
 this.$=`function ${$$[$0-6]} ${$$[$0-5]} ${$$[$0-4]} ${$$[$0-3]} ${$$[$0-2]} \n${$$[$0-1]} \n${$$[$0]}`; 
break;
case 29:
 this.$=`${$$[$0-3]}${$$[$0-2]}${$$[$0]}`; 
break;
case 42:
             
break;
case 75: case 151: case 161:
 this.$=`${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 86: case 160:
 this.$=`${$$[$0-4]}\n${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 87:
 this.$=`${$$[$0-3]} ${$$[$0-2]} ${$$[$0-1]}${$$[$0]}`; 
break;
case 88:
 this.$=`${$$[$0-2]} ${$$[$0-1]} ${$$[$0]}`; 
break;
case 90: case 91: case 92: case 93: case 94:
 this.$="var"; 
break;
case 95:
 this.$= `${$$[$0]}`; 
break;
case 96:
 this.$ =`${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 97:
 this.$=`${$$[$0-2]} ${$$[$0-1]} ${$$[$0]}`;
break;
case 99:
this.$=`${$$[$0-3]} and ${$$[$0]}`;
break;
case 100:
this.$=`${$$[$0-3]} or ${$$[$0]}`;
break;
case 101:
this.$=`${$$[$0-3]} >= ${$$[$0]}`;
break;
case 102:
this.$=`${$$[$0-3]} <= ${$$[$0]}`;
break;
case 103:
this.$=`${$$[$0-3]} == ${$$[$0]}`;
break;
case 104:
this.$=`${$$[$0-3]} != ${$$[$0]}`;
break;
case 105:
this.$=`${$$[$0-2]}++`;
break;
case 106:
this.$=`${$$[$0-2]}--`;
break;
case 108:
this.$=`${$$[$0-2]}>${$$[$0]}`;
break;
case 109:
this.$=`${$$[$0-2]}<${$$[$0]}`;
break;
case 110:
this.$=`${$$[$0-2]}*${$$[$0]}`;
break;
case 111:
this.$=`${$$[$0-2]}/${$$[$0]}`;
break;
case 112:
this.$=`${$$[$0-2]}+${$$[$0]}`;
break;
case 113:
this.$=`${$$[$0-2]}-${$$[$0]}`;
break;
case 114:
this.$=`not ${$$[$0]}`;
break;
case 115:
this.$=`-${$$[$0]}`;
break;
case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123:
this.$=`${$$[$0]}`;
break;
case 126: case 137:
 this.$=`${$$[$0-6]}${$$[$0-5]} ${$$[$0-4]} ${$$[$0-3]}${$$[$0-2]} \n${$$[$0-1]} \n${$$[$0]}`; 
break;
case 127: case 138:
 this.$=`${$$[$0-5]}${$$[$0-4]} ${$$[$0-3]} ${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 128:
 this.$=`${$$[$0-8]} \n${$$[$0-7]} ${$$[$0-6]}${$$[$0-5]} ${$$[$0-4]} ${$$[$0-3]}${$$[$0-2]} \n${$$[$0-1]} \n${$$[$0]}`; 
break;
case 129:
 this.$=`${$$[$0-7]} \n${$$[$0-6]} ${$$[$0-5]}${$$[$0-4]} ${$$[$0-3]} ${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 130:
 this.$=`${$$[$0-3]}${$$[$0-2]} \n${$$[$0-1]} \n${$$[$0]}`; 
break;
case 131: case 135: case 164:
 this.$=`${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 132:
 this.$=`${$$[$0-10]}${$$[$0-9]} ${$$[$0-8]}${$$[$0-7]}${$$[$0-6]}${$$[$0-5]}${$$[$0-4]} ${$$[$0-3]}${$$[$0-2]} \n${$$[$0-1]} \n${$$[$0]}`;
break;
case 133:
 this.$=`${$$[$0-9]}${$$[$0-8]} ${$$[$0-7]}${$$[$0-6]}${$$[$0-5]}${$$[$0-4]}${$$[$0-3]} ${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 134:
 this.$=`${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}`; 
break;
case 139:
 this.$=`${$$[$0-8]}${$$[$0-7]} \n${$$[$0-6]} \n${$$[$0-5]}${$$[$0-4]}${$$[$0-3]} ${$$[$0-2]} ${$$[$0-1]}${$$[$0]}`; 
break;
case 140:
 this.$=`${$$[$0-7]}${$$[$0-6]}${$$[$0-5]}${$$[$0-4]}${$$[$0-3]} ${$$[$0-2]} ${$$[$0-1]}${$$[$0]}`; 
break;
case 162:
 this.$=`${$$[$0-4]}${$$[$0-3]} ${$$[$0-2]} ${$$[$0-1]}${$$[$0]}`; 
break;
case 165: case 166: case 167:
 this.$=`${$$[$0-1]}${$$[$0]}`; 
break;
case 168:
 this.$=`${$$[$0-2]} ${$$[$0-1]}${$$[$0]}`; 
break;
case 169: case 171:
 this.$=`console.log()${$$[$0]}`; 
break;
case 170: case 172:
 this.$=`console.log( ${$$[$0-2]} )${$$[$0]}`; 
break;
case 173:
console.log('error Sintactico:  '+yytext+'  fila: '+ this._$.first_line );
break;
}
},
table: [{2:$V0,3:1,4:[1,2],5:3,6:4,7:5,8:6,9:7,10:$V1},{1:[3]},{1:[2,1]},{2:$V0,4:[1,10],6:11,7:12,8:6,9:7,10:$V1},o($V2,[2,3]),o($V2,[2,4]),o($V2,[2,7]),o($V2,[2,8]),{11:[1,13],16:[1,14]},{14:[1,15]},{1:[2,2]},o($V2,[2,5]),o($V2,[2,6]),{12:[1,16]},{12:[1,17]},o($V2,[2,11]),{13:[1,18]},{13:[1,19]},{2:$V3,10:$V4,12:$V5,14:[1,20],15:21,18:25,23:$V6,28:24,32:26,34:$V7,35:$V8,36:$V9,37:$Va,38:27,40:22,41:23},{2:[1,39],10:[1,38],14:[1,36],17:37},o($V2,[2,9]),{2:$V3,10:$V4,12:$V5,14:[1,40],18:45,23:$V6,28:41,32:42,34:$V7,35:$V8,36:$V9,37:$Va,38:27,40:43,41:44},o($Vb,[2,30]),o($Vb,[2,31]),o($Vb,[2,32]),o($Vb,[2,33]),o($Vb,[2,34]),{12:$Vc,53:46,54:47},{33:[1,49]},{51:$Vd},{19:[1,52],20:$Ve,23:$Vf,29:51,34:$Vg,35:$Vh,36:$Vi,37:$Vj},{12:[2,90]},{12:[2,91]},{12:[2,92]},{12:[2,93]},{12:[2,94]},o($V2,[2,12]),{10:[1,60],14:[1,59]},{20:$Ve,23:$Vf,29:61,34:$Vg,35:$Vh,36:$Vi,37:$Vj},{33:[1,62]},o($V2,[2,10]),o($Vb,[2,35]),o($Vb,[2,36]),o($Vb,[2,37]),o($Vb,[2,38]),o($Vb,[2,39]),{33:[1,63],39:[1,64]},o($Vk,[2,95]),o($Vk,[2,98],{51:[1,65]}),o($Vl,[2,89]),{12:$Vm,52:66,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{12:[1,77]},{20:[1,78]},{12:[2,22]},{12:[2,23]},{12:[2,24]},{12:[2,25]},{12:[2,26]},{12:[2,27]},o($V2,[2,13]),{20:$Ve,23:$Vf,29:79,34:$Vg,35:$Vh,36:$Vi,37:$Vj},{12:[1,80]},o($Vv,[2,64]),o($Vl,[2,88]),{12:$Vc,54:81},{12:$Vm,52:82,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{33:[1,83],50:$Vw,51:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},{12:$Vm,52:95,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{12:$Vm,52:96,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},o($VH,[2,116]),o($VH,[2,117]),o($VH,[2,118]),o($VH,[2,119]),o($VH,[2,120]),o($VH,[2,121]),o($VH,[2,122]),o($VH,[2,123]),{22:[1,97]},{21:[1,98]},{12:[1,99]},{22:[1,100]},o($Vk,[2,96]),o($Vk,[2,97],{50:$Vw,51:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($Vl,[2,87]),{55:[1,101]},{56:[1,102]},{12:$Vm,51:[1,103],52:104,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{12:$Vm,51:[1,105],52:106,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{51:[1,107]},{51:[1,108]},{12:$Vm,50:[1,109],52:110,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{12:$Vm,52:112,59:$Vn,60:[1,111],64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{12:$Vm,52:113,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{12:$Vm,52:114,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{12:$Vm,52:115,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},o($VH,[2,114]),o($VH,[2,115]),{23:$V6,26:[1,116],30:117,34:$V7,35:$V8,36:$V9,37:$Va,38:118},{22:[1,119]},{22:[1,120]},{23:$V6,26:[1,121],30:122,34:$V7,35:$V8,36:$V9,37:$Va,38:118},{12:$Vm,52:123,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{12:$Vm,52:124,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{12:$Vm,52:125,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},o($VI,[2,108],{50:$Vw,59:$VC,60:$VD,62:$VF,63:$VG}),{12:$Vm,52:126,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},o($VI,[2,109],{50:$Vw,59:$VC,60:$VD,62:$VF,63:$VG}),{12:$Vm,52:127,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{12:$Vm,52:128,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},o($VH,[2,105]),o($VJ,[2,112],{59:$VC,62:$VF,63:$VG}),o($VK,[2,106],{64:69,52:96,12:$Vm,59:$Vn,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu}),o($VJ,[2,113],{59:$VC,62:$VF,63:$VG}),o($VL,[2,107],{50:$Vw,51:$Vx,57:$VA,58:$VB,59:$VC,60:$VD,62:$VF,63:$VG}),o($VK,[2,110],{59:$VC}),o($VK,[2,111],{59:$VC}),{13:[1,129],33:[1,130]},{26:[1,131],39:$VM},{12:[1,133]},{23:[1,134]},{23:$V6,26:[1,135],30:136,34:$V7,35:$V8,36:$V9,37:$Va,38:118},{33:[1,137]},{26:[1,138],39:$VM},o($VL,[2,99],{50:$Vw,51:$Vx,57:$VA,58:$VB,59:$VC,60:$VD,62:$VF,63:$VG}),o($VL,[2,100],{50:$Vw,51:$Vx,57:$VA,58:$VB,59:$VC,60:$VD,62:$VF,63:$VG}),o($VI,[2,101],{50:$Vw,59:$VC,60:$VD,62:$VF,63:$VG}),o($VI,[2,102],{50:$Vw,59:$VC,60:$VD,62:$VF,63:$VG}),o($VI,[2,103],{50:$Vw,59:$VC,60:$VD,62:$VF,63:$VG}),o($VH,[2,104]),{2:$V3,12:$VN,14:[1,139],23:$V6,31:140,34:$V7,35:$V8,36:$V9,37:$Va,38:27,40:141,41:142,42:147,43:143,44:144,45:145,46:146,47:148,48:149,49:150,71:152,73:$VO,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},o($Vb,[2,20]),{13:[1,161],33:[1,162]},{23:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:163},o($VW,[2,28]),{24:[1,164]},{33:[1,165]},{26:[1,166],39:$VM},o($Vv,[2,60]),{33:[1,167]},o($Vb,[2,16]),{2:$V3,12:$VX,14:[1,168],23:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:27,40:169,41:170,42:175,43:171,44:172,45:173,46:174,47:176,48:177,49:178,71:152,73:$VO,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},o($VY,[2,65]),o($VY,[2,66]),o($VY,[2,67]),o($VY,[2,68]),o($VY,[2,69]),o($VY,[2,70]),o($VY,[2,71]),o($VY,[2,72]),o($VY,[2,73]),o($VY,[2,74]),{22:$VZ,50:[1,180],51:$Vd},o($VY,[2,124],{72:182,75:[1,183]}),{22:[1,184]},{22:[1,185]},{13:[1,186]},{85:[1,187]},{33:[1,188]},{33:[1,189]},{12:$Vm,33:[1,190],52:191,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{22:[1,192]},{2:$V3,12:$VN,14:[1,193],23:$V6,31:194,34:$V7,35:$V8,36:$V9,37:$Va,38:27,40:141,41:142,42:147,43:143,44:144,45:145,46:146,47:148,48:149,49:150,71:152,73:$VO,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},o($Vb,[2,21]),{12:[1,195]},{25:[1,196]},o($Vv,[2,62]),{33:[1,197]},o($Vv,[2,61]),o($Vb,[2,18]),o($VY,[2,76]),o($VY,[2,77]),o($VY,[2,78]),o($VY,[2,79]),o($VY,[2,80]),o($VY,[2,81]),o($VY,[2,82]),o($VY,[2,83]),o($VY,[2,84]),o($VY,[2,85]),{22:$VZ,50:[1,198],51:$Vd},{50:[1,199]},{12:$Vm,26:[1,200],52:202,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,80:201},o($VY,[2,125]),{13:[1,204],73:[1,203]},{12:[1,207],23:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:206,77:205},{12:$Vm,52:208,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{2:$V3,12:$V_,14:[1,210],23:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:27,40:211,41:212,42:217,43:213,44:214,45:215,46:216,47:218,48:219,49:220,71:152,73:$VO,74:209,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},{86:[1,222]},o($VY,[2,165]),o($VY,[2,166]),o($VY,[2,167]),{33:[1,223],50:$Vw,51:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},{12:$Vm,52:224,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},o($Vb,[2,17]),{2:$V3,12:$VX,14:[1,225],23:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:27,40:169,41:170,42:175,43:171,44:172,45:173,46:174,47:176,48:177,49:178,71:152,73:$VO,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},o($VW,[2,29]),{12:[1,226]},o($Vv,[2,63]),{50:[1,227]},{33:[1,228]},{33:[1,229]},{26:[1,230],39:[1,231]},o($VW,[2,163],{50:$Vw,51:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),{22:[1,232]},{2:$V3,12:$V_,14:[1,234],23:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:27,40:211,41:212,42:217,43:213,44:214,45:215,46:216,47:218,48:219,49:220,71:152,73:$VO,74:233,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},{33:[1,235]},{12:[1,236]},{33:[2,136],51:[1,237]},{26:[1,238],50:$Vw,51:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},{12:$V$,14:[1,239],42:244,43:240,44:241,45:242,46:243,47:245,48:246,49:247,71:152,73:$VO,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},{78:[1,249]},o($V01,[2,141]),o($V01,[2,142]),o($V01,[2,143]),o($V01,[2,144]),o($V01,[2,145]),o($V01,[2,146]),o($V01,[2,147]),o($V01,[2,148]),o($V01,[2,149]),o($V01,[2,150]),{22:$VZ,50:[1,250],51:$Vd},{85:[1,251]},o($VY,[2,168]),{26:[1,252],50:$Vw,51:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},o($Vb,[2,19]),{26:[1,253]},{33:[1,254]},o($VY,[2,75]),o($VY,[2,161]),{33:[1,255]},{12:$Vm,52:256,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{12:$Vm,52:257,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{12:$V$,14:[1,258],42:244,43:240,44:241,45:242,46:243,47:245,48:246,49:247,71:152,73:$VO,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},o($VY,[2,131]),{12:$Vm,52:259,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{51:[1,260]},{12:$Vm,64:261,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{13:[1,262]},{78:[1,263]},o($V01,[2,152]),o($V01,[2,153]),o($V01,[2,154]),o($V01,[2,155]),o($V01,[2,156]),o($V01,[2,157]),o($V01,[2,158]),o($V01,[2,159]),{22:$VZ,50:[1,264]},{22:[1,265]},{50:[1,266]},{87:[1,267],88:[1,268]},{13:[1,269]},{13:[1,270]},o($VY,[2,86]),o($VY,[2,162]),o($VW,[2,164],{50:$Vw,51:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),{26:[1,271],50:$Vw,51:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},o($VY,[2,130]),{33:[1,272],50:$Vw,51:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},{12:$Vm,64:273,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{33:[2,135]},{2:$V3,12:$V_,14:[1,275],23:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:27,40:211,41:212,42:217,43:213,44:214,45:215,46:216,47:218,48:219,49:220,71:152,73:$VO,74:274,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},{22:[1,276]},{50:[1,277]},{12:$Vm,52:278,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{33:[1,279]},{22:[1,280]},{22:[1,281]},{2:$V3,12:$V_,14:[1,283],23:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:27,40:211,41:212,42:217,43:213,44:214,45:215,46:216,47:218,48:219,49:220,71:152,73:$VO,74:282,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},{2:$V3,12:$V11,14:[1,284],23:$V6,27:285,34:$V7,35:$V8,36:$V9,37:$Va,38:27,40:286,41:287,42:288,43:289,44:290,45:291,46:292,47:293,48:294,49:295,71:152,73:$VO,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},{13:[1,297]},{12:$Vm,52:298,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{33:[2,134]},{12:$V$,14:[1,299],42:244,43:240,44:241,45:242,46:243,47:245,48:246,49:247,71:152,73:$VO,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},o($VY,[2,138]),{12:$Vm,52:300,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{33:[1,301]},{26:[1,302],50:$Vw,51:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},o($V01,[2,151]),{12:$Vm,26:[1,303],52:304,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{12:$Vm,26:[1,305],52:306,59:$Vn,60:$Vo,64:69,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{12:$V$,14:[1,307],42:244,43:240,44:241,45:242,46:243,47:245,48:246,49:247,71:152,73:$VO,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},o($V21,[2,127]),o($Vb,[2,14]),{2:$V3,12:$V11,14:[1,308],23:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:27,40:309,41:310,42:311,43:312,44:313,45:314,46:315,47:316,48:317,49:318,71:152,73:$VO,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},o($VY,[2,40]),o($VY,[2,41]),o($VY,[2,42]),o($VY,[2,43]),o($VY,[2,44]),o($VY,[2,45]),o($VY,[2,46]),o($VY,[2,47]),o($VY,[2,48]),o($VY,[2,49]),{22:$VZ,51:$Vd},{2:$V3,12:$V_,14:[1,320],23:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:27,40:211,41:212,42:217,43:213,44:214,45:215,46:216,47:218,48:219,49:220,71:152,73:$VO,74:319,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},{26:[1,321],50:$Vw,51:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},o($VY,[2,137]),{26:[1,322],50:$Vw,51:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},o($V01,[2,160]),{33:[1,323]},{33:[1,324]},{26:[1,325],50:$Vw,51:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},{33:[1,326]},{26:[1,327],50:$Vw,51:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},o($V21,[2,126]),o($Vb,[2,15]),o($VY,[2,50]),o($VY,[2,51]),o($VY,[2,52]),o($VY,[2,53]),o($VY,[2,54]),o($VY,[2,55]),o($VY,[2,56]),o($VY,[2,57]),o($VY,[2,58]),o($VY,[2,59]),{12:$V$,14:[1,328],42:244,43:240,44:241,45:242,46:243,47:245,48:246,49:247,71:152,73:$VO,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},o($V21,[2,129]),{13:[1,329]},{33:[1,330]},o($VY,[2,140]),o($VY,[2,169]),{33:[1,331]},o($VY,[2,171]),{33:[1,332]},o($V21,[2,128]),{2:$V3,12:$V_,14:[1,334],23:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:27,40:211,41:212,42:217,43:213,44:214,45:215,46:216,47:218,48:219,49:220,71:152,73:$VO,74:333,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},o($VY,[2,139]),o($VY,[2,170]),o($VY,[2,172]),{12:$V$,14:[1,335],42:244,43:240,44:241,45:242,46:243,47:245,48:246,49:247,71:152,73:$VO,76:$VP,78:$VQ,79:$VR,81:$VS,82:$VT,83:$VU,84:$VV},o($VY,[2,133]),o($VY,[2,132])],
defaultActions: {2:[2,1],10:[2,2],31:[2,90],32:[2,91],33:[2,92],34:[2,93],35:[2,94],53:[2,22],54:[2,23],55:[2,24],56:[2,25],57:[2,26],58:[2,27],261:[2,135],273:[2,134]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    console.log("*************************UTILIDADES*******************************")
    var listaReporteToken = []
    var listaErroresLexicos = []
    var listaErroresSintacticos = []
    var listaTraducccion = []
    var json;
    /* metodo para agregar y hacer el reporte de tokens reconocidos */
    function addListaToken(fila,columna,tipo,token){
        listaReporteToken.push({Fila:fila,Columna:columna,Tipo:tipo,Token:token});
    }
    /* metodo para guardar todos los errores lexico */
    function addErrorLexico(tipo,fila,columna,descripcion){
        listaErroresLexicos.push({Tipo:tipo,Fila:fila,Columna:columna,Descripcion:descripcion});
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 10;
break;
case 4:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 11;
break;
case 5:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 21
break;
case 6:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 16;
break;
case 7:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 20;
break;
case 8:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 19;
break;
case 9:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 34;
break;
case 10:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 36;
break;
case 11:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 37;
break;
case 12:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 35;
break;
case 13:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 69;
break;
case 14:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 70;
break;
case 15:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 23;
break;
case 16:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 76;
break;
case 17:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 78;
break;
case 18:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 79;
break;
case 19:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 73;
break;
case 20:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 75;
break;
case 21:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 81;
break;
case 22:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 82;
break;
case 23:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 83;
break;
case 24:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 84;
break;
case 25:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 86;
break;
case 26:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 87;
break;
case 27:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"RESERVADA",""+yy_.yytext);return 88;
break;
case 28:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 13;
break;
case 29:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 14;
break;
case 30:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 22;
break;
case 31:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 26;
break;
case 32:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 24;
break;
case 33:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 25;
break;
case 34:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 39;
break;
case 35:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 85;
break;
case 36:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 33;
break;
case 37:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 58;
break;
case 38:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 57;
break;
case 39:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 55;
break;
case 40:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 56;
break;
case 41:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 59;
break;
case 42:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 61;
break;
case 43:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 51;
break;
case 44:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 50;
break;
case 45:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 60;
break;
case 46:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 62;
break;
case 47:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"SIMBOLO",""+yy_.yytext);return 63;
break;
case 48:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"STRING",""+yy_.yytext);return 67;
break;
case 49:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"CARACTER",""+yy_.yytext);return 68;
break;
case 50:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"DECIMAL",""+yy_.yytext);return 66;
break;
case 51:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"DIGITO",""+yy_.yytext);return 65;
break;
case 52:addListaToken(""+yy_.yylloc.first_line,""+yy_.yylloc.first_column,"IDENTIFICADOR",""+yy_.yytext);return 12;
break;
case 53:addErrorLexico("Lexico",yy_.yylloc.first_line,yy_.yylloc.first_column,"El caracter "+yy_.yytext+" no pertenece al lenguaje");
break;
case 54:return 4;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*(\*(?!\/)|[^*])*\*\/)/,/^(?:public\b)/,/^(?:class\b)/,/^(?:main\b)/,/^(?:interface\b)/,/^(?:void\b)/,/^(?:static\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:String\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:<)/,/^(?:>)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:\^)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:".*")/,/^(?:'.*')/,/^(?:[0-9]+(.[0-9])+\b)/,/^(?:[0-9]+\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}